@page "/addspots"
@using Gatherama.Shared
@using Microsoft.Maui.Controls.Maps
@using Microsoft.Maui.Maps
@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services
@using MongoDB.Bson;
@using Newtonsoft.Json


@inject IJSRuntime JS
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject LoginState loginstate


<h3>Add Gathering Spot</h3>

<p>Here you can add your new gathering spot!</p>

<head>
    <title>Simple Marker</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBBJYKuoWVsb2MFdchEYIihbAb3pN0fFUg&callback=initMap&libraries=&v=weekly" async defer></script>
    <link rel="stylesheet" href="./style.css" />
    <script src="./app.js"></script>


    <script>

        let markers = [];
    
        function initMap(visiblefindings, person, platform, currentlocation) {

            const geocoder = new google.maps.Geocoder();
          
            const map = new google.maps.Map(document.getElementById("googleMap"), {
                zoom: 12,
                center: { lat: 62.8893928527832, lng: 27.6920166015625 }, //alkukeskitys Kuopioon
                fullscreenControl: false,
                zoomControl: true,
                streetViewControl: false
            });

            const mush_icon = '../Images_index/mushroom_icon.png'; 
            const berry_icon = '../Images_index/berry_icon.png';
            const blueberry_icon = '../Images_index/blueberry_icon.png';

            map.addListener("click", (e) => {

                placeMarkerAndPanTo(e.latLng, map, geocoder);
                //geocodeLatLng(e.latLng, geocoder, map);
            });

            //To pan to current location
            const locationButton = document.createElement("button");

            locationButton.textContent = "Pan to Current Location";
            locationButton.classList.add("custom-map-control-button");
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
            locationButton.addEventListener("click", () => {

                //window.alert("Lokaatio on " + currentlocation.latitude + ", " + currentlocation.longitude);
                if (currentlocation != null) {

                    try {
                        map.setCenter({ lat: currentlocation.latitude, lng: currentlocation.longitude });
                    }
                    catch(err){
                        // Browser doesn't support Geolocation
                        handleLocationError(true, infoWindow, map.getCenter());
                    }
                        
                }
                else { 
                   window.alert("Something went wrong with your current location. Try again later.")
                    // Browser doesn't support Geolocation
                   handleLocationError(false, infoWindow, map.getCenter());
                }
            });

            //Add markers for each place
            /* --> funktiossa erottelu mikä julkinen, kaverin jakama ja mikä oma paikka - eri ikonit:
                    - musta marja: julkinen, sieni: oma, mustikka: kaverit ---- androidissa eri
                --> tarkastelu/muokkauspromptit kun henkilö klikkaa markkeria
                --> markerit kiinteitä
            */

            visiblefindings.forEach(function (find) {
                if (find._idPerson.username === person.username) {//jos oma löydös, merkitään sienellä

                    if(platform == false) {
                        var marker = new google.maps.Marker({
                            position: { lat: find._idPlace.lat, lng: find._idPlace.lng },
                            map: map,
                            icon: {
                                url: mush_icon, 
                                scaledSize: new google.maps.Size(36, 36)
                            },
                            title: "PRIVATE: \nCity: " + find._idPlace.city + ", \nSpecies: " + find._idSpecies.s_name
                        });

                    } else {//jos custom ikonit poissa, näkyy androidissa
                        var marker = new google.maps.Marker({
                            position: { lat: find._idPlace.lat, lng: find._idPlace.lng },
                            map: map,
                            title: "PRIVATE: \nCity: " + find._idPlace.city + ", \nSpecies: " + find._idSpecies.s_name
                        });
                    }
                    var publicity = "OWN SPOT:";
                }
                else if (find._private == 2) {//toisen julkinen löydös, merkitään mustalla marjalla
                    if (platform == false) {
                        var marker = new google.maps.Marker({
                            position: { lat: find._idPlace.lat, lng: find._idPlace.lng },
                            map: map,
                            icon: {
                                url: berry_icon,
                                scaledSize: new google.maps.Size(46, 46)
                            },
                            title: "PUBLIC: \nCity: " + find._idPlace.city + ", \nSpecies: " + find._idSpecies.s_name
                        });
                    }
                    else {//jos custom ikonit poissa, näkyy androidissa
                        var marker = new google.maps.Marker({
                            position: { lat: find._idPlace.lat, lng: find._idPlace.lng },
                            map: map,
                            title: "PUBLIC: \nCity: " + find._idPlace.city + ", \nSpecies: " + find._idSpecies.s_name
                        });
                    }
                    var publicity = "PUBLIC SPOT:";
                }
                else {//jos ei oma tai julkinen, niin se on kaverin julkaisema
                    if (platform == false) {
                        var marker = new google.maps.Marker({
                            position: { lat: find._idPlace.lat, lng: find._idPlace.lng },
                            map: map,
                            icon: {
                                url: blueberry_icon,
                                scaledSize: new google.maps.Size(36, 36)
                            },
                            title: "FRIEND: \nCity: " + find._idPlace.city + ", \nSpecies: " + find._idSpecies.s_name
                        });
                    }
                    else {//jos custom ikonit poissa, näkyy androidissa
                        var marker = new google.maps.Marker({
                            position: { lat: find._idPlace.lat, lng: find._idPlace.lng },
                            map: map,
                            title: "FRIEND: \nCity: " + find._idPlace.city + ", \nSpecies: " + find._idSpecies.s_name
                        });

                    }
                    var publicity = "FRIEND'S SPOT:";
                }

                //format date
                const isoDateTime = find.datetime;
                const formattedDate = formatShortDate(isoDateTime);

                var info = publicity + "\n\nPerson: " + find._idPerson.username + "\nSpecies: " + find._idSpecies.s_name + "\nCategory: " + find._idSpecies.category + "\nCity: " + find._idPlace.city + "\nCountry: " + find._idPlace.country + "\nCoordinates: " + find._idPlace.lat + ", " + find._idPlace.lng + "\nDate: " + formattedDate + "\nAmount: " + find.amount + "\nMemo: " + find.memo;
                
                //jos oma löydös, annetaan mahdollisuus muokata / poistaa
                if (find._idPerson.username === person.username) {
                    info = info + "\n\nWould you like to edit this information?"
                }
                
                marker.addListener('click', function () {
                    var confirmation = window.confirm(info);

                    //jos oma löydös ja käyttäjä painoi "OK", avataan edit sivu
                    if (find._idPerson.username === person.username && confirmation == true) {
                        window.location.href = "/editspot/" + find.id; 
                    }
                })
                
            });

        }

     
        //datetime format
        function formatShortDate(isoDateTime) {
          const date = new Date(isoDateTime);

          const options = { weekday: 'short', day: 'numeric', month: 'long', year: 'numeric'  };
          const formattedDate = date.toLocaleString('en-US', options);

          return formattedDate;
        }


        function placeMarkerAndPanTo(latLng, map, geocoder) {

            newMarker = new google.maps.Marker({
                position: latLng,
                map: map,
                draggable: true
            });

            map.panTo(latLng);

            // window.alert("Tultiin geocodeen: " + latLng)
            const latilng = {
                lat: parseFloat(latLng.lat()),
                lng: parseFloat(latLng.lng()),
            };

            geocoder
                .geocode({ location: latilng })
                .then((response) => {
                    if (response && response.results && response.results.length > 0) {
                        const formattedAddress =
                            response.results[3].formatted_address;
                        // window.alert("Formatted address: " + JSON.stringify(response.results[3].formatted_address))
                        const latlngStr = formattedAddress.split(",", 2);
                        const cityCountry = {
                            city: latlngStr[0],
                            country: latlngStr[1],
                        };

                        setLocationData(latilng, cityCountry); // Set location data

                    } else {
                        window.alert("No results found");
                    }
                })
                .catch((e) =>
                    window.alert("Geocoder failed due to: " + e.message || "Unknown error")
                );
            deleteMarkers();
            markers.push(newMarker);

            return newMarker;
        }

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // Removes the markers from the map, but keeps them in the array.
        function hideMarkers() {
            setMapOnAll(null);
        }

        //Remove the markers on the map
        function deleteMarkers() {
            hideMarkers();
            markers = [];
        }


        function setLocationData(latilng, cityCountry) {
            //window.alert("Tultiin setLoocationiin")

            const placeInfo = {
                city: cityCountry.city,
                county: cityCountry.country,
                lat: latilng.lat,
                lng: latilng.lng
            }

            document.getElementById("city").value = cityCountry.city;
            document.getElementById("country").value = cityCountry.country;
            document.getElementById("lat").value = JSON.stringify(latilng.lat);
            document.getElementById("lng").value = JSON.stringify(latilng.lng);

            return placeInfo;
        }

        function fetchData() {
            //window.alert("Tultiin fetchDataJS");
            var fetchPlaceInfo = document.getElementById("city").value + ",";
            fetchPlaceInfo += document.getElementById("country").value + ",";
            fetchPlaceInfo += document.getElementById("lat").value + ",";
            fetchPlaceInfo += document.getElementById("lng").value + ",";



            return fetchPlaceInfo;
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(
                browserHasGeolocation
                    ? "Error: The Geolocation service failed."
                    : "Error: Your browser doesn't support geolocation.",
            );
            infoWindow.open(map);
        }
 
         window.initMap = initMap;
    </script>
</head>
<body>

    @if (mapIsReady == true)
    {
        <div>
            <div id="googleMap" style="width:100%;height:400px;"></div>
        </div>
    }
    else
    {
        <h5 class="text-center" style="color:#173328">Loading map...Locating spots...<br />Please wait</h5>
    }

    <EditForm Model="newFinding" OnValidSubmit="@NestedValidation">
        <div class="col-lg-4 col-md-12">
            <label for="city"> City </label>
            <InputText id="city" class="form-control" @bind-Value=newFinding._idPlace.city></InputText>
            @if(errorTable!=null)
            {
                <div class="text-warning">@errorTable[0]</div>
            }
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="country" style="margin-top: 10px"> Country </label>
            <InputText id="country" @bind-Value=newFinding._idPlace.country class="form-control"></InputText>
            @if (errorTable != null)
            {
                <div class="text-warning">@errorTable[1]</div>
            }
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="lat" style="margin-top: 10px"> Latitude </label>
            <InputNumber id="lat" @bind-Value=newFinding._idPlace.lat class="form-control"></InputNumber>
            
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="lng" style="margin-top: 10px"> Longitude </label>
            <InputNumber id="lng" @bind-Value=newFinding._idPlace.lng class="form-control"></InputNumber>
            @if (errorTable != null)
            {
                <div class="text-warning">@errorTable[2]</div>
            }
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="findingDate" style="margin-top: 10px">Add a Date </label>
            <InputDate id="findingDate" @bind-Value=newFinding.datetime class="form-control"></InputDate>
            
        </div>

        <div class="col-lg-4 col-md-12">
            <label for="findindAmount" style="margin-top: 10px"> Amount </label>
            <InputText id="findindAmount" @bind-Value=newFinding.amount class="form-control"></InputText>
            
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="findingMemo" style="margin-top: 10px"> Memo </label>
            <InputText id="findingMemo" @bind-Value=newFinding.memo class="form-control">Enter memolog here</InputText>
        </div>

        <div class="col-lg-4 col-md-12">
            <label for="findindPrivate" style="margin-top: 10px"> Private or not? </label>
            <InputSelect id="findindPrivate" @bind-Value=newFinding._private class="form-control">
                <option value="">Select...</option>
                <option value="0">Private</option>
                <option value="1">Friends</option>
                <option value="2">Public</option>
            </InputSelect>
            @if (errorTable != null)
            {
                <div class="text-warning">@errorTable[3]</div>
            }
        </div>

        <div class="col-lg-4 col-md-12">
            <label for="speciesCategory" style="margin-top: 10px"> Berries or Mushrooms? </label>
            <InputSelect id="speciesCategory" @bind-Value="newFinding._idSpecies.category" class="form-control">
                <option value="">Select...</option>
                <option>Berries</option>
                <option>Mushrooms</option>
            </InputSelect>
            @if (errorTable != null)
            {
                <div class="text-warning">@errorTable[4]</div>
            }
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="speciesSubCategory" style="margin-top: 10px"> Species Sub Category </label>
            <InputText id="speciesSubCategory" @bind-Value="newFinding._idSpecies.subCategory" class="form-control" >Enter the Sub Category name here</InputText>
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="s_name" style="margin-top: 10px"> Species Name </label>
            <InputText id="s_name" @bind-Value="newFinding._idSpecies.s_name" class="form-control">Enter the Familiar name name here</InputText>
            @if (errorTable != null)
            {
                <div class="text-warning">@errorTable[5]</div>
            }
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="latin_name" style="margin-top: 10px"> Latin name </label>
            <InputText id="latin_name" @bind-Value="newFinding._idSpecies.latin_name" class="form-control">Enter the Latin name here</InputText>
        </div>

        <button class="btn btn-primary" type="submit" style="margin-bottom: 50px; margin-top: 20px">Add a Finding!</button>


    </EditForm>

</body>



@code {
        /*NOTES:
        * 
        * Pyydä lupa gps:ään? - android ok!
        * 
        * Etsi käyttäjän lokaatio ja kohdista kartta - ok
        * 
        * Näytä karttaan klikattu paikka myös koordinaattikentissä (kenttiä pitää pystyä muokkaamaan). - ok
        * 
        * Karttaa pitää pystyä liikuttamaan ja zoomaamaan - OK!
        * 
        * Custom pins - ok! (Androidissa toteutettu eri tavalla)
        * 
        * (Additional: Opastus pinnipaikalle/osoitteeseen?)
        *         
        * (Additional: Anna hakea paikan nimellä (ja koordinaateilla?))
    */

    private bool mapIsReady = false;

    private string[] errorTable = new string[8];
    private bool isValidated = true;
    private bool platform = false;
    private bool placeExists = false;
    private bool speciesExists = false;
    private PlaceDto existingPlace = new PlaceDto();
    private SpeciesDto existingSpecies = new SpeciesDto();

    private bool _isCheckingLocation;
    private Location currentlocation = new Location();
    private Location cachedlocation;
    private CancellationTokenSource _cancelTokenSource;

    private string placeInfoJS;

    private List<FriendshipDto> friendships { get; set; }
    private List<PersonDto> friends = new List<PersonDto>();
    // private List<PersonDto> persons { get; set; }
    private List<FindingDto> allfindings { get; set; }
    private List<FindingDto> visiblefindings = new List<FindingDto>();
    private List<PlaceDto> places { get; set; }
    private List<SpeciesDto> species { get; set; }

    private PersonDto person { get; set; }
    // private FindingDto postFinding = new FindingDto();
    private FindingDto newFinding = new FindingDto()
    {
        _idPlace = new PlaceDto { },
        _idSpecies = new SpeciesDto { },
        _idPerson = new PersonDto { }
    };

    protected override async Task OnInitializedAsync()
    {
        var dateAndTime = DateTime.Now;
        var date = dateAndTime.Date.ToString().Replace("00.00.00", "");
        newFinding.datetime = DateTime.Parse(date);

        //Lokaatiota (erit. Android) ja Data Validaatiota varten
        await GetCurrentLocation();
        if(currentlocation == null)
        {
            await GetCachedLocation();
            if(cachedlocation == null)
            {
                Console.WriteLine("ERROR: For unknown reason cannot fetch location");
            }
            currentlocation = cachedlocation;
        }

        //Haetaan kaikki löydökset, joista suodatetaan julkiseksi merkityt, kavereiden jakamat ja henkilön omat toiseen listaan
        allfindings = await apiService.GetFindingsAsync();

        // It is not pretty but this is how I got it working the ID thingy
        newFinding._idPlace = new PlaceDto { Id = ObjectId.GenerateNewId().ToString() };
        newFinding._idSpecies = new SpeciesDto { Id = ObjectId.GenerateNewId().ToString() };

        // persons = await apiService.GetPersonsAsync();
        species = await apiService.GetSpeciesAsync();
        places = await apiService.GetPlacesAsync();
        friendships = await apiService.GetFriendshipsAsync();

        //etsitään kaikki kirjautuneen henkilön kaverit
        foreach (FriendshipDto friendship in friendships)
        {
            //jos kirjautunut hlö on jonkun kaveri (& kaveruus on hyväksytty)
            if ((loginstate.isSingedin.Id == friendship._idPerson.Id || loginstate.isSingedin.Id == friendship._idFriend.Id) && (friendship.friend_accept == 1 && friendship.friend_request == 1))
            {
                if(loginstate.isSingedin.Id == friendship._idPerson.Id)
                {
                    friends.Add(friendship._idFriend);
                }
                else
                {
                    friends.Add(friendship._idPerson);
                }
            }
        }

        //määritetään uuden löydöksen tekijä
        newFinding._idPerson = await apiService.GetPersonByIdAsync(loginstate.isSingedin?.Id);

        /*ota kaikki löydökset ja vertaa niitä kirjautuneeseen henkilöön
            - jos henkilön oma löydös, näytä
            - jos toisen henkilön julkinen löydös, näytä
            - jos kaverin julkaisema (kavereille), näytä

            --> nämä kaikki samaan listaan, joka viedään parametrina initMap() :lle
                    --> funktiossa erottelu mikä julkinen, kaverin jakama ja mikä oma paikka - eri ikonit
                        - musta marja: julkinen, sieni: yksityinen, mustikka: kaverit
                    --> tarkastelu/muokkauspromptit kun henkilö klikkaa markkeria
                    --> markerit kiinteät
        */ 

        foreach(FindingDto find in allfindings)
        {
            if(find._idPerson.Id == loginstate.isSingedin.Id || find._private == 2)//julkinen
            {
                visiblefindings.Add(find);

            }
            else
            {
                foreach(PersonDto friend in friends)//kaverin jakama
                {
                    if (find._idPerson.Id == friend.Id && find._private == 1)
                    {
                        visiblefindings.Add(find);
                    }
                }
            }
        }

        //kirjautunut henkilö InvokeVoidAsync -metodin parametriksi
        person = loginstate.isSingedin;

        //mikä laite käytössä: Android vai muu (Windows)
        if (DeviceInfo.Current.Platform == DevicePlatform.Android)
        {
            platform = true;
        }
        else { platform = false; }

        //Map is done loading
        mapIsReady = true;
        StateHasChanged();

        //Setting map with markers
        await JS.InvokeVoidAsync("initMap", visiblefindings, person, platform, currentlocation);
    }

    //Huom. Form Validation ei tunnista sisäkkäisiä objekteja, tehdään tämä käsin
    protected async void NestedValidation() 
    {
        try
        {
            //Fetching the information from JS
            placeInfoJS = await JS.InvokeAsync<string>("fetchData");
            string[] splitFetch = placeInfoJS.Split(',');
            newFinding._idPlace.city = splitFetch[0];
            newFinding._idPlace.country = splitFetch[1];
            newFinding._idPlace.lat = double.Parse(splitFetch[2], System.Globalization.CultureInfo.InvariantCulture);
            newFinding._idPlace.lng = double.Parse(splitFetch[3], System.Globalization.CultureInfo.InvariantCulture);
            //Console.WriteLine($"City: {newFinding._idPlace.city}, Lat: {newFinding._idPlace.lat}, Lng: {newFinding._idPlace.lng}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex);
        }

        for(int i = 0; i < errorTable.Length; i++)
        {
            errorTable[i] = null;
        }
        isValidated = true;

        //Finding
        if (newFinding.datetime == null || newFinding.datetime > DateTime.Now)
        {
            var date = DateTime.Now.Date.ToString().Replace("00.00.00", "");
            newFinding.datetime = DateTime.Parse(date);
        }

        if (newFinding._private == null)
        {
            errorTable[3] = "Private is required";
            isValidated = false;
        }

        //memo ja amount voi puuttua -> jos puuttuu, merkitään kantaan "-"
        if (string.IsNullOrEmpty(newFinding.memo))
        {
            newFinding.memo = "-";
        }

        if (string.IsNullOrEmpty(newFinding.amount))
        {
            newFinding.amount = "-";
        }

        //Place
        if (string.IsNullOrEmpty(newFinding._idPlace.city))
        {
            errorTable[0] = "City is required";
            isValidated = false;
        }

        if (string.IsNullOrEmpty(newFinding._idPlace.country))
        {
            errorTable[1] = "Country is required";
            isValidated = false;
        }

        if (newFinding._idPlace.lat == null || newFinding._idPlace.lng == null){

            errorTable[2] = "Coordinates are required";
            isValidated = false;
        }

        //Species

        if (string.IsNullOrEmpty(newFinding._idSpecies.category))
        {
            errorTable[4] = "Category is required";
            isValidated = false;
        }

        if (string.IsNullOrEmpty(newFinding._idSpecies.subCategory))
        {//ei pakollinen kenttä
            newFinding._idSpecies.subCategory = "-";
        }

        if (string.IsNullOrEmpty(newFinding._idSpecies.s_name))
        {
            errorTable[5] = "Name of the species is required";
            isValidated = false;
        }

        if (string.IsNullOrEmpty(newFinding._idSpecies.latin_name))
        {//ei pakollinen kenttä
            newFinding._idSpecies.latin_name = "-";
        }


        //onko tiedot oikein
        if(isValidated == true)
        {
            SubmitFinding();
        }
        else
        {
            this.StateHasChanged();
        }
    }

    protected bool CheckIfPlaceExists()
    {
        //Onko olemassa jo kyseistä paikkaa ja / tai lajia täsmälleen samoilla tiedoilla?
        foreach (PlaceDto place in places)
        {
            if (place.city == newFinding._idPlace.city && place.country == newFinding._idPlace.country && place.lat == newFinding._idPlace.lat && place.lng == newFinding._idPlace.lng)
            {
                placeExists = true;
                existingPlace = place;
                break;
            }
        }

        return placeExists;
    }

    protected bool CheckIfSpeciesExists()
    {
        foreach (SpeciesDto spec in species)
        {
            if (spec.category == newFinding._idSpecies.category && spec.subCategory == newFinding._idSpecies.subCategory && spec.s_name == newFinding._idSpecies.s_name && spec.latin_name == newFinding._idSpecies.latin_name)
            {
                speciesExists = true;
                existingSpecies = spec;
                break;
            }
        }
        return speciesExists;
    }

    protected async void SubmitFinding()
    {
        placeExists = CheckIfPlaceExists();

        //jos paikka olemassa, käytetään vanhaa paikkaa ja uutta paikkaa ei tallenneta kantaan
        if (placeExists)
        {
            newFinding._idPlace = existingPlace;
        }
        else 
        { //uusi paikka lisätään kantaan, tiedot tarkastettu validoinnissa
            await apiService.PostPlaceAsync(newFinding._idPlace); 
        }

        speciesExists = CheckIfSpeciesExists();

        if (speciesExists)
        {
            newFinding._idSpecies = existingSpecies;
        }
        else
        {
            await apiService.PostSpeciesAsync(newFinding._idSpecies);
        }

        await apiService.PostFindingAsync(newFinding);
        NavigationManager.NavigateTo("/ownspots", true);
    }

    //NOTE! TÄMÄ LOGIIKKA TOIMII ANDROIDILLA

    public async Task<Location> GetCachedLocation()
    {
        try
        {
            cachedlocation = await Geolocation.Default.GetLastKnownLocationAsync();

            if (cachedlocation != null)
            {
                Console.WriteLine($"Latitude: {cachedlocation.Latitude}, Longitude: {cachedlocation.Longitude}, Altitude: {cachedlocation.Altitude}");
            }

        }
        catch (FeatureNotSupportedException fnsEx)
        {
            // Handle not supported on device exception
            Console.WriteLine("ERROR: " + fnsEx);
        }
        catch (FeatureNotEnabledException fneEx)
        {
            // Handle not enabled on device exception
            Console.WriteLine("ERROR: " + fneEx);
        }
        catch (PermissionException pEx)
        {
            // Handle permission exception
            Console.WriteLine("ERROR: " + pEx);
        }
        catch (Exception ex)
        {
            // Unable to get location
            Console.WriteLine("ERROR: " + ex);
        }

        return cachedlocation;
    }

    public async Task<Location> GetCurrentLocation()
    {
        try
        {
            _isCheckingLocation = true;

            GeolocationRequest request = new GeolocationRequest(GeolocationAccuracy.Medium, TimeSpan.FromSeconds(10));

            _cancelTokenSource = new CancellationTokenSource();

            currentlocation = await Geolocation.Default.GetLocationAsync(request, _cancelTokenSource.Token);

            if (currentlocation != null){
                Console.WriteLine($"Latitude: {currentlocation.Latitude}, Longitude: {currentlocation.Longitude}, Altitude: {currentlocation.Altitude}");
            }
        }
        catch (FeatureNotSupportedException fnsEx)
        {
            Console.WriteLine("ERROR: " + fnsEx);
        }
        catch(FeatureNotEnabledException fneEx)
        {
            Console.WriteLine("ERROR: " + fneEx);
        }
        catch(PermissionException pEx)
        {
            Console.WriteLine("ERROR: " + pEx);
        }
        catch (Exception ex)
        {
            // Unable to get location
            Console.WriteLine("ERROR: " + ex);
        }
        finally
        {
            _isCheckingLocation = false;
        }
        return currentlocation;
    }

    public void CancelRequest()
    {
        if (_isCheckingLocation && _cancelTokenSource != null && _cancelTokenSource.IsCancellationRequested == false)
            _cancelTokenSource.Cancel();
    }

}
