@page "/addspots"
@using Gatherama.Shared
@using Microsoft.Maui.Controls.Maps
@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services
@inject IJSRuntime JS
@inject ApiService apiService


<h1>Add Gathering Spot</h1>

<p>Here you can add your new gathering spot!</p>

<!--MAPS SEKOILUJA-->


<div>

    <div>
        <input type="text" id="lat" placeholder="Lat" value="@myLat"/> <!-- Vain double arvot sopivia -->
        <input type="text" id="lng" placeholder="Long" value="@myLng"/>
    </div>

    <div id="googleMap" style="width:100%;height:400px;"></div>

    <script>
    /*
        async function initMap() { 
            const mush_icon = '../Images_index/mushroom_icon.png'; //NOTE! Kuvat ihan liian isot :,D
            const berry_icon = '../Images_index/berry_icon.png';
            // Request needed libraries.
           // const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
            const map = new google.maps.Map(document.getElementById("googleMap"), {
                center: { lat: 62.8893928527832, lng: 27.6920166015625 },
                zoom: 14,
                fullscreenControl: false,
                zoomControl: true,
                streetViewControl: false,
                mapID: '2d582126daca5ce5' //Kata's MAP ID (Vector)
            });

            const infoWindow = new google.maps.InfoWindow();

            const marker = new AdvancedMarkerElement({
                position: { lat: 62.8893928527832, lng: 27.6920166015625 },
                map,
                gmpDraggable: true,
               // icon: mush_icon,
               // title: "Finding"
            });

            marker.addListener("dragend", (event) => {
                const position = marker.position;

                infoWindow.close();
                infoWindow.setContent(
                    `Pin dropped at: ${position.lat()}, ${position.lng()}`,
                );
                infoWindow.open(marker.map, marker);
            });
        }

        initMap();  */

        function initMap() {
            var myLatLng = {

                lat: 62.8893928527832,
                lng: 27.6920166015625
            };
           // var myLat = document.getElementById("lat");
           // var myLong = document.getElementById("lng");

           /* EI TOIMI 
           
           if (Double.Parse(myLat.value) === null || Double.Parse(myLong).value === null) {
                myLatLng = {

                    lat: 62.8893928527832,
                    lng: 27.6920166015625
                };
            }
            else {

                myLatLng = {
                    lat: Double.Parse(myLat.value), //tryparse
                    lng: Double.Parse(myLong.value)
                };
            };*/

            const map = new google.maps.Map(document.getElementById("googleMap"), {
                zoom: 14,
                center: myLatLng,
                fullscreenControl: false,
                zoomControl: true,
                streetViewControl: false
            });
            
            const mush_icon = '../Images_index/mushroom_icon.png'; //NOTE! Kuvat ihan liian isot :,D
            const berry_icon = '../Images_index/berry_icon.png';
        
            //tarvitaan for each looppi jokaiselle tietokannan markkerille/lokaatiolla, jossa on haluttu k‰ytt‰j‰ ja kavereiden jakamat

            //testimarker
            var mush_marker = new google.maps.Marker({
                position: myLatLng,
                map,
                icon: mush_icon,
                title: "Finding"
            });

            //toinen testimarker

            const berry_marker = new google.maps.Marker({
                position: { lat: 62.908551, lng: 27.659310 },
                map,
                icon: berry_icon,
                title: "BERRIES!"
            });
           
        }
    </script>
  
</div>

<head>
    <title>Simple Marker</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBBJYKuoWVsb2MFdchEYIihbAb3pN0fFUg&callback=initMap&libraries=&v=weekly" defer></script>
    <link rel="stylesheet" href="./style.css" />
    <script src="./app.js"></script>
</head>


@* <EditForm >
     <div class="col-lg-4 col-md-12">
        <label for="Place">
            Add Place
        </label>
        <Input id="Place" class="form-control" placeholder="Enter Place co-ordinates"/>
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="Date">
            Add Date to the Finding
        </label>
        <DateInput id="Date" TValue="DateOnly" class="form-control" placeholder="Enter Date"/>
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="amount">
            Add the Amount of Species found
        </label>
        <Input id="Amount" class="form-control" placeholder="Enter Amount"/>
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="Memo">
            Add some Notes (if wanted)
        </label>
        <Input id="Notes" class="form-control" placeholder="Enter the Note"/>
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="Picture">
            Add Picture
        </label>
        <Input id="Picture" class="form-control" placeholder="Enter the Note"/>
    </div>  
</EditForm> *@


@code {
    //GOOGLE MAPS API KEY (KATA): AIzaSyBBJYKuoWVsb2MFdchEYIihbAb3pN0fFUg

    /*NOTES:
    * 
    * Pyyd‰ lupa gps:‰‰n?
    * 
    * Etsi ensin k‰ytt‰j‰n lokaatio ja n‰yt‰ se kartassa sek‰ koordinaattikentiss‰ (kentti‰ pit‰‰ pysty‰ muokkaamaan).
    * 
    * Karttaa pit‰‰ pysty‰ liikuttamaan ja zoomaamaan - OK!
    * 
    * Anna hakea paikan nimell‰ (ja koordinaateilla?)
    * 
    * Custom pins: vain 1 erilainen pin vai esim. eri kategorioille omat (sieni, marja, kala jne.?)
    * 
    * Opastus pinnipaikalle/osoitteeseen.
    */

    //test
    public async Task<string> GetCachedLocation()
    {
        try
        {
            Location location = await Geolocation.Default.GetLastKnownLocationAsync();

            if (location != null)
                return $"Latitude: {location.Latitude}, Longitude: {location.Longitude}, Altitude: {location.Altitude}";
        }
        catch (FeatureNotSupportedException fnsEx)
        {
            // Handle not supported on device exception
        }
        catch (FeatureNotEnabledException fneEx)
        {
            // Handle not enabled on device exception
        }
        catch (PermissionException pEx)
        {
            // Handle permission exception
        }
        catch (Exception ex)
        {
            // Unable to get location
        }

        return "None";
    }

    private CancellationTokenSource _cancelTokenSource;
    private bool _isCheckingLocation;
    double myLat;
    double myLng;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentLocation();
    }

    public async Task GetCurrentLocation()
    {
        try
        {
            _isCheckingLocation = true;

            GeolocationRequest request = new GeolocationRequest(GeolocationAccuracy.Medium, TimeSpan.FromSeconds(10));

            _cancelTokenSource = new CancellationTokenSource();

            Location currentlocation = await Geolocation.Default.GetLocationAsync(request, _cancelTokenSource.Token);

            if (currentlocation != null){
                Console.WriteLine($"Latitude: {currentlocation.Latitude}, Longitude: {currentlocation.Longitude}, Altitude: {currentlocation.Altitude}");
                myLat = currentlocation.Latitude;
                myLng = currentlocation.Longitude;
            }
                
        }
        // Catch one of the following exceptions:
        //   FeatureNotSupportedException
        //   FeatureNotEnabledException
        //   PermissionException
        catch (Exception ex)
        {
            // Unable to get location
        }
        finally
        {
            _isCheckingLocation = false;
        }
    }

    public void CancelRequest()
    {
        if (_isCheckingLocation && _cancelTokenSource != null && _cancelTokenSource.IsCancellationRequested == false)
            _cancelTokenSource.Cancel();
    }

}
