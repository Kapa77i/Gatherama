@page "/ownspots"

@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services;
@using Gatherama.Shared
@using MongoDB.Bson;
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject LoginState loginstate

@* Collaps Button*@
@* <p>
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
        Button with data-bs-target
    </button>
</p>
<div class="collapse" id="collapseExample">
    <div class="card card-body">
        Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger.
    </div>
    <p></p>
</div> *@

@* Collaps Divit*@

<h4>Your own Gathering Spots</h4>

@if (findings != null)
{
    @foreach (var item in findings)
    {
        headingNbr++;
        collapsingNbr++;

        collabId += collapsingNbr;
        headingId += collapsingNbr;
        itemId += collapsingNbr;

        specie = species.FirstOrDefault(m => m.Id == item._idSpecies.Id);
        person = persons.FirstOrDefault(j => j.Id == item._idPerson.Id);
        place = places.FirstOrDefault(k => k.Id == item._idPlace.Id);

        <p></p>
        <div class="accordion" id="accordionExample">
            <div class="accordion-item">

                <h2 class="accordion-header" id="headingId">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#id-@collabId" aria-expanded="false" aria-controls="id-@collabId">
                        @item._idPlace.city.ToString(), @item._idPlace.country.ToString(), @item.datetime.ToString().Replace("0.00.00", "")
                    </button>
                </h2>

                <div id="id-@collabId" class="accordion-collapse collapse" aria-labelledby="headingId" data-bs-parent="#accordionExample">
                    <div class="accordion-body">

                       <strong>Species Category:</strong>
                        @item._idSpecies.category.ToString()<br /> 

                        <strong>Species Subcategory:</strong>
                        @item._idSpecies.subCategory.ToString()<br />

                        <strong>Latin Name:</strong>
                        @item._idSpecies.latin_name.ToString()<br /> 

                        <strong>Name:</strong>
                        @item._idSpecies.s_name.ToString()<br />
                    
                       
                        <strong>Amount of Finding:</strong>
                        @item.amount.ToString()<br />

                        <strong>Memo log:</strong>
                        @item.memo<br />
                       
                    </div>
                </div>
            </div>
        </div>

        
    }
}
else
{
    <p></p>
    <div class="d-flex justify-content-center">
        <div>Loading...</div>
        <div></div>
        <div class="spinner-border text-secondary" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}

 
@code {
    private FindingDto newFinding = new FindingDto()
        {
            _idPlace = new PlaceDto { },
            _idSpecies = new SpeciesDto { },
            _idPerson = new PersonDto { }
    };

    private FindingDto postFinding = new FindingDto();

    public List<FindingDto> allfindings { get; private set; }
    public List<FindingDto> findings = new List<FindingDto>();
    public List<PersonDto> persons { get; private set; }
    public List<SpeciesDto> species { get; private set; }
    public List<PlaceDto> places { get; private set; }
    private SpeciesDto specie;
    private PersonDto person;
    private PlaceDto place;
    int collapsingNbr = 0;
    int headingNbr = 0;

    string collabId = "test";
    string headingId = "test";
    string itemId = "testi";

    protected override async Task OnInitializedAsync()
    {
        allfindings = await apiService.GetFindingsAsync();
        foreach(FindingDto find in allfindings)
        {
            if(find._idPerson.Id == loginstate.isSingedin.Id)
            {
                findings.Add(find);
            }
        }

        // It is not pretty but this is how I got it working the ID thingy
        newFinding._idPlace = new PlaceDto { Id = ObjectId.GenerateNewId().ToString() };
        newFinding._idSpecies = new SpeciesDto { Id = ObjectId.GenerateNewId().ToString() };
        newFinding._idPerson = new PersonDto { Id = ObjectId.GenerateNewId().ToString() };

        persons = await apiService.GetPersonsAsync();
        species = await apiService.GetSpeciesAsync();
        places = await apiService.GetPlacesAsync();

    }


    protected async void SubmitFinding()
    {
        await apiService.PostPlaceAsync(newFinding._idPlace);
        await apiService.PostSpeciesAsync(newFinding._idSpecies);
        await apiService.PostFindingAsync(newFinding);
        NavigationManager.NavigateTo("/ownspots", true);
    }

}