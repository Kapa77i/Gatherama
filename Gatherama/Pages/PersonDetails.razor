@page "/persondetails"

@using Gatherama.Shared
@using Microsoft.Maui.Controls.Maps
@using Microsoft.Maui.Maps
@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services
@using MongoDB.Bson;
@using Newtonsoft.Json


@inject IJSRuntime js
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject LoginState loginstate


<h3>PersonDetails</h3>

<EditForm Model="@person" Context="formContext" OnValidSubmit="Submit">

    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="FirstName">
            First Name:
        </label>
        <InputText id="FirstName" Class="form-control" @bind-Value="@person.firstName" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[0]</div>
        }
    </div>
    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="LastName">
            Last Name:
        </label>
        <InputText id="LastName" Class="form-control" @bind-Value="@person.lastName" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[1]</div>
        }
    </div>
    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="UserName">
            Username:
        </label>
        <InputText id="UserName" Class="form-control" @bind-Value="@person.username" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[2]</div>
        }
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="Email">
            Email:
        </label>
        <InputText id="Email" Class="form-control" @bind-Value="@person.email" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[3]</div>
        }
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="password">
            Password:
        </label>
        <InputText id="password" type="password" Class="form-control" @bind-Value="@person.password" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="repeatPassword">
            Repeat password:
        </label>
        <InputText id="repeatPassword" type="password" Class="form-control" @bind-Value="@repeatPassword" />
    </div>
    <div><button class="btn btn-primary" type="submit" style="margin-bottom: 50px; margin-top: 20px">Update</button> <button class="btn btn-warning" type="submit" style="margin-left: 7px; margin-bottom: 50px; margin-top: 20px"  @onclick="@(() => OpenDeleteModal(formContext))">Delete</button></div>
    
</EditForm>

@* Delete Modal *@
@if (deleteModalShown)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete your account? You will be logged out of the system and loose all your findings.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-warning" @onclick="DeleteInfo">Delete</button>
                </div>
            </div>
        </div>
    </div>
}




@code {
    private string[] errorTable = new string[4];
    private bool isValidated = true;
    private string repeatPassword;
    private PersonDto person = new PersonDto();
    private List<PersonDto> persons = new List<PersonDto>();
    private bool isUserFound = false;

    private bool deleteModalShown = false;


    protected override async Task OnInitializedAsync()
    {
        persons = await apiService.GetPersonsAsync();
        person = await apiService.GetPersonByIdAsync(loginstate.isSingedin.Id);
    }


    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

    private void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
    }

    private async void Submit(EditContext formContext)
    {

        for (int i = 0; i < errorTable.Length; i++)
        {
            errorTable[i] = null;
        }
        isValidated = true;


        isUserFound = false;
        if (person.password != repeatPassword)
        {
            await js.InvokeVoidAsync("alert", "Password and Repeat password do not match");

        }

        else if (person.username != loginstate.isSingedin.username)
        {
            foreach (var item in persons)
            {
                if (item.username == person.username)
                {
                    await js.InvokeVoidAsync("alert", "Username is already in use");
                    isUserFound = true;
                    break;
                }
                if (item.email == person.email)
                {
                    await js.InvokeVoidAsync("alert", "Email is already in use");
                    isUserFound = true;
                    break;
                }
            }
        }

        else
        {
            Console.WriteLine("Something went wrong");
        }

        //Edit input fields validation
        if (string.IsNullOrEmpty(person.firstName))
        {
            errorTable[0] = "First Name is required";
            isValidated = false;
        }
        if (string.IsNullOrEmpty(person.lastName))
        {
            errorTable[1] = "Last Name is required";
            isValidated = false;
        }
        if (string.IsNullOrEmpty(person.username))
        {
            errorTable[2] = "Username is required";
            isValidated = false;
        }
        if (string.IsNullOrEmpty(person.email))
        {
            errorTable[3] = "Email is required";
            isValidated = false;
        }


        if ((!isUserFound || person.username == loginstate.isSingedin.username) && isValidated == true)
        {
            await apiService.PutPersonAsync(loginstate.isSingedin.Id, person);
            NavigationManager.NavigateTo("/", true);
        }

    }

    private void OpenDeleteModal(EditContext formContext)
    {
        deleteModalShown = true;
    }

    private void CloseDeleteModal()
    {
        deleteModalShown = false;

    }

    protected async void DeleteInfo()
    { //Needs a code to delete all the spots for this person. 
       // await apiService.DeletePlaceAsync(editFinding._idPlace.Id);
       // await apiService.DeletePlaceAsync(editFinding._idSpecies.Id);
       // await apiService.DeleteFindingAsync(Id);

        await apiService.DeleteFindingAsync(loginstate.isSingedin.Id);
        loginstate.SetLogin(false, null);
        NavigationManager.NavigateTo("/", true);
    }
}
