@page "/persondetails"

@using Gatherama.Shared
@using Microsoft.Maui.Controls.Maps
@using Microsoft.Maui.Maps
@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services
@using MongoDB.Bson;
@using Newtonsoft.Json


@inject IJSRuntime js
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject LoginState loginstate


<h3>PersonDetails</h3>

<EditForm OnValidSubmit="@Submit" OnInvalidSubmit="@HandleInvalidSubmit" Model="@person">

    <DataAnnotationsValidator />

    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="FirstName">
            Firstname:
        </label>
        <InputText id="FirstName" Class="form-control" @bind-Value="@person.firstName" />
        <ValidationMessage For="@(() => person.firstName)" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="LastName">
            Lastname:
        </label>
        <InputText id="LastName" Class="form-control" @bind-Value="@person.lastName" />
        <ValidationMessage For="@(() => person.lastName)" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="UserName">
            Username:
        </label>
        <InputText id="UserName" Class="form-control" @bind-Value="@person.username" />
        <ValidationMessage For="@(() => person.username)" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="Email">
            Email:
        </label>
        <InputText id="Email" Class="form-control" @bind-Value="@person.email" />
        <ValidationMessage For="@(() => person.email)" />
    </div>

    <div class="col-lg-4 col-md-12">
        <label for="password">
            Password:
        </label>
        <InputText id="password" type="password" Class="form-control" @bind-Value="@person.password" />
        <ValidationMessage For="@(() => person.password)" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="repeatPassword">
            Repeat password:
        </label>
        <InputText id="repeatPassword" type="password" Class="form-control" style="margin-left: 15px; margin-bottom: 50px;" @bind-Value="@repeatPassword" />
        <ValidationMessage For="@(() => repeatPassword)" />
    </div>
    @*Dont know how to present succesfull registeration to user. Pop-up when you click ok it redirects you to index page?*@
    <button class="btn btn-info" type="submit">Update</button>

    @if (displayValidationErrorMessages)
    {
        <div class="col-md-4" style="margin-top:10px">
            <label>Validation Messages: </label>
            <ValidationSummary />
        </div>
    }
</EditForm>



@code {
    private string repeatPassword;
    private PersonDto person = new PersonDto();
    private List<PersonDto> persons = new List<PersonDto>();
    private bool isUserFound = false;


 

    protected override async Task OnInitializedAsync()
    {
        persons = await apiService.GetPersonsAsync();
        person = await apiService.GetPersonByIdAsync(loginstate.isSingedin.Id);
    }


    bool displayValidationErrorMessages = false;
    bool displayUserAddedToDB = false;

    private void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
        displayUserAddedToDB = false;
    }

    private async void Submit(EditContext context)
    {
        if (context.Validate())
        {
            displayValidationErrorMessages = false;
            displayUserAddedToDB = true;
        }
        else
        {
            displayValidationErrorMessages = true;
            displayUserAddedToDB = false;
        }

        isUserFound = false;
        if (person.password != repeatPassword)
        {
            await js.InvokeVoidAsync("alert", "Password and Repeat password do not match");

        }

        else if (person.username != loginstate.isSingedin.username)
        {
            foreach (var item in persons)
            {
                if (item.username == person.username)
                {
                    await js.InvokeVoidAsync("alert", "Username is already in use");
                    isUserFound = true;
                    break;
                }
            }
        }
        else if (!isUserFound || person.username == loginstate.isSingedin.username)
        {
            await apiService.PutPersonAsync(loginstate.isSingedin.Id, person);
            NavigationManager.NavigateTo("/", true);
        }

        else
        {
            Console.WriteLine("Something went wrong");
        }

    }
}
