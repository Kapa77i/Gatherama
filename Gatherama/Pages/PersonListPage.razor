@page "/personlist"
@using Gatherama.Shared
@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services
@using MongoDB.Bson;
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject LoginState loginstate


@* Friend Request box, eli tässä tarkistetaan kaikki henkilön omat kaverit:
- friendrequest = 1 && friendaccept = 0
------->  talussa oma pending - osio, joka näkyy sekä lähettäjälle että vastaanottajalle
Jos niitä on: näytetään ja annetaan käyttäjälle prompti, jossa voi joko hyväksyä tai hylätä
- hyväksyntä: friendaccept = 1
- hylkäys: koko entiteetin poisto

NOTE: kutsun lähettäjä on aina _idPerson, kutsun vastaanottaja _idFriend
*@

<h3>Username Status</h3>
@* All users *@

@if (persons is not null)
{
    @if (!pendingFriends.All(p => p.Equals(0)))
    {
        <div class="container1">
            <p>
                <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                    <h5>New Friend Request!</h5>
                </button>
            </p>
            <div class="collapse" id="collapseExample">
                @foreach (var item in pendingFriends)
                {
                    <div class="card card-body1">
                        <div class="row4">
                            <div class="col-sm">@item.username</div>
                            <div class="col-sm"><button id="@item.Id" class="btn btn-primary" type="submit" @onclick="() => AcceptFriendRequest(item)">Accept</button>   <button id="@item.Id" class="btn btn-warning" type="submit" @onclick="() => DeclineFriendRequest(item)">Decline</button></div>
                            <div class="col-sm"></div>
                        </div>
                    </div>
                    <p></p>
                }

            </div>
        </div>
    }

    <br />
    <br />

    @if (!friends.All(p => p.Equals(0)))
    {
    <div class="container">
        <h3>Friends</h3>
            @foreach (var item in friends)
            {
                <div class="row1">
                    <div class="col-sm">@item.username</div>
                    <div class="col-sm justify-content-md-end"><button class="btn btn-warning ms-auto" type="button" @onclick="() => OpenDeleteModal(item)">Delete</button></div>
            </div>
            <div class="row"/>
            }
    </div>
    }

    <br />
    <br />
    <br />
    
    @if (!pending.All(p => p.Equals(0)))
    {
        <div class="container">
            <h3>Pending Friend Requests</h3>
            
                @foreach (var item in pending)
                {
                <div class="row2">
                    <div class="col-sm">@item.username</div>
                    <div class="col-sm">Pending.... </div>
                    <div class="col-sm"><button class="btn btn-warning ms-auto" type="button" style="margin-left: 70px;" @onclick="() => OpenDeleteModal(item)">Remove</button></div>
                </div>
                }
        </div>
    }

    <br />
    <br />
    <br />
    <div />

    <div class="container">
        <h3>Other Gatherama Users</h3>
        @foreach (var item in other)
        {
            <div class="row3">
                <div class="col-sm">@item.username</div>
                <div class="col-sm"><button id="@item.Id" class="btn btn-primary" type="submit" @onclick="() => SubmitFriendRequest(item)">Add</button></div>
            </div>
        }
    </div>
}



@* Delete Modal *@
@if (deleteModalShown && selectedFriend != null)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete @selectedFriend.username?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-warning" @onclick="DeleteFriendship">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public List<PersonDto> persons { get; private set; }
    public List<PlaceDto> places { get; private set; }
    public List<FriendshipDto> friendships { get; private set; }
    public List<FriendshipDto> friendshipsTobe { get; private set; }
    public List<PersonDto> friends = new List<PersonDto>();
    public List<PersonDto> other = new List<PersonDto>();
    public List<PersonDto> pending = new List<PersonDto>();
    public List<PersonDto> pendingFriends = new List<PersonDto>();
    public FriendshipDto newFriend = new FriendshipDto();

    private bool deleteModalShown = false;
    private PersonDto selectedFriend;

    public PersonDto newFriendship = new PersonDto();

    protected override async Task OnInitializedAsync()
    {
        persons = await apiService.GetPersonsAsync();
        friendships = await apiService.GetFriendshipsAsync();

        foreach (var item in friendships)
        {
            if (loginstate.isSingedin.Id == item._idPerson.Id || loginstate.isSingedin.Id == item._idFriend.Id)
            {
                if (item.friend_accept == 1 && item.friend_request == 1)
                {
                    if (loginstate.isSingedin.username == item._idPerson.username)
                    {
                        friends.Add(item._idFriend);
                    }
                    else
                    {
                        friends.Add(item._idPerson);
                    }
                }
                else if (item.friend_accept == 0 && item.friend_request == 1)//erottele myös ne ystävyydet, jotka on "pending"
                {
                    if (loginstate.isSingedin.username == item._idPerson.username)
                    {
                        pending.Add(item._idFriend);
                    }
                }
            }
        }

        //Show received friendship requested
        foreach (var item in friendships)
        {
            if (loginstate.isSingedin.username == item._idFriend.username && item.friend_accept == 0 && item.friend_request == 1)
            {
                pendingFriends.Add(item._idPerson);
            }
        }

        //Remove the friends and sent requests and pending requests from other list
        foreach (var item in persons)
        {
            if (friends.All(friend => friend.username != item.username) &&
                pending.All(pend => pend.username != item.username) &&
                item.username != loginstate.isSingedin.username &&
                pendingFriends.All(p => p.username != item.username))
            {
                other.Add(item);
            }
        }
    }

    //Posting friend request
    protected async void SubmitFriendRequest(PersonDto friend)
    {
        //buttonista kaverin tiedot, jolle lähetetään kaveripyyntö
        //loginstatesta kirjautuneen käyttäjän tiedot
        //Friendrequest muutetaan 1
        //Friendaccept edelleen 0
        // All this to DB

        //Huom! Jostain syystä pitää generoida Id jotta menee läpi MongoDB:hen
        newFriend = new FriendshipDto { Id = ObjectId.GenerateNewId().ToString() };

        newFriend._idFriend = friend;
        newFriend._idPerson = loginstate.isSingedin;
        newFriend.friend_request = 1;
        newFriend.friend_accept = 0;

        //tarkistetaan ettei ystävyyttä ole jo olemassa, ennen kuin lähetetään ystäväkutsu
        if (!friends.Contains(friend) && !pending.Contains(friend))
        {
            await apiService.PostFriendshipAsync(newFriend);
            NavigationManager.NavigateTo("/personlist", true);
        }

    }

    //Accepting Friend request
    protected async void AcceptFriendRequest(PersonDto friend)
    {
        foreach (var item in friendships)
        {
            if (loginstate.isSingedin.username == item._idFriend.username)
            {
                if (friend.username == item._idPerson.username && item.friend_accept == 0 && item.friend_request == 1)
                {
                    newFriend.Id = item.Id;
                }
            }
        }

        newFriend._idFriend = loginstate.isSingedin;
        newFriend._idPerson = friend;
        newFriend.friend_request = 1;
        newFriend.friend_accept = 1;

        await apiService.PutFriendshipAsync(newFriend.Id, newFriend);
        NavigationManager.NavigateTo("/personlist", true);
    }


    //Declining friend request
    protected async void DeclineFriendRequest(PersonDto friend)
    {
        foreach (var item in friendships)
        {
            if (loginstate.isSingedin.username == item._idFriend.username)
            {
                if (friend.username == item._idPerson.username && item.friend_accept == 0 && item.friend_request == 1)
                {
                    newFriend.Id = item.Id;
                }
            }
        }

        await apiService.DeleteFriendshipAsync(newFriend.Id);
        NavigationManager.NavigateTo("/personlist", true);
    }


    //Delete friend and the Delete modal
    private void OpenDeleteModal(PersonDto friend)
    {
        selectedFriend = friend;
        deleteModalShown = true;
    }

    private void CloseDeleteModal()
    {
        deleteModalShown = false;
        selectedFriend = null;
    }

    private async Task DeleteFriendship()
    {
        if (selectedFriend != null)
        {
            foreach (var item in friendships)
            {
                if (loginstate.isSingedin.username == item._idFriend.username || loginstate.isSingedin.username == item._idPerson.username)
                {
                    //Get hold of only friends in the list
                    if (item.friend_accept == 1 && item.friend_request == 1)
                    {
                        //check that the person deleting is either _friend or _person with the signed in person
                        if ((loginstate.isSingedin.username == item._idFriend.username) && (selectedFriend.username == item._idPerson.username))
                        {
                            newFriend.Id = item.Id;
                        }
                        else if ((loginstate.isSingedin.username == item._idPerson.username) && (selectedFriend.username == item._idFriend.username))
                        {
                            newFriend.Id = item.Id;
                        } 
                    }
                }
                //This is for deleting sent friend request
                if ((loginstate.isSingedin.username == item._idPerson.username) && (selectedFriend.username == item._idFriend.username) && (item.friend_accept == 0 && item.friend_request == 1))
                {
                        newFriend.Id = item.Id;
                }
            }

            await apiService.DeleteFriendshipAsync(newFriend.Id);
            NavigationManager.NavigateTo("/personlist", true);
        }

        // Close the modal
        CloseDeleteModal();
    }


}
