@page "/personlist"
@using Gatherama.Shared
@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services
@using MongoDB.Bson;
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject LoginState loginstate

<!--TÄMÄ ON TESTAUKSEEN-->


@* Friend Request box tarvitaan, eli tässä pitäisi tarkistaa kaikki henkilön omat kaverit:
- friendrequest = 1 && friendaccept = 0
-------> väliaikaisratkaisu: talussa oma pending - osio, joka näkyy sekä lähettäjälle että vastaanottajalle
Jos niitä on: näytetään ja annetaan käyttäjälle prompti, jossa voi joko hyväksyä tai hylätä
- hyväksyntä: friendaccept = 1
- hylkäys: koko entiteetin poisto

NOTE: kutsun lähettäjä on aina _idPerson, kutsun vastaanottaja _idFriend
*@

<h1>Username Status</h1>
@* All users *@
<table class="table">

    @if (pendingFriends is not null)
    {
        <thead>
            <tr>
                <th>Received Friend Requests</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in pendingFriends)
            {

                <tr>
                    <td>@item.username</td>
                    <td><button id="@item.Id" class="btn btn-primary" type="submit" @onclick="() => AcceptFriendRequest(item)">Accept</button></td>
                    <td><button id="@item.Id" class="btn btn-danger" type="submit" @onclick="() => DeclineFriendRequest(item)">Decline</button></td>
                </tr>
            }


        </tbody>
    }

    
    @if (persons is not null)
    {
        <thead>
            <tr>
                <th>Friends</th>
                </tr>
            </thead>
        <tbody>
            @if(friends is not null)
            {
                @foreach (var item in friends)
                {

                    <tr>
                        <td>@item.username</td>
                        <td><button id="@item.Id" class="btn btn-danger" type="submit" @onclick="() => DeclineFriendRequest(item)" >Delete a Friend</button></td>
                    </tr>
                }
            }
            
        </tbody>


        <thead>
            <tr>
                <th>Pending Friend Request</th>
            </tr>
        </thead>
        <tbody>
            @if (pending is not null)
            {
                @foreach (var item in pending)
                {

                    <tr>
                        <td>@item.username</td>
                        <td>Pending...</td>
                    </tr>
                }
            }

        </tbody>

   

        <thead>
            <tr>
                <th>Others Users</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in other)
            {
                <tr>
                    <td>@item.username</td>
                    <td><button id="@item.Id" class="btn btn-primary" type="submit" @onclick="() => SubmitFriendRequest(item)">Add a Friend</button></td>
                </tr>
            }
        </tbody>

    }
</table>


@code {
    public List<PersonDto> persons { get; private set; }
    public List<PlaceDto> places { get; private set; }
    public List<FriendshipDto> friendships { get; private set; }
    public List<FriendshipDto> friendshipsTobe { get; private set; }
    public List<PersonDto> friends = new List<PersonDto>();
    public List<PersonDto> other = new List<PersonDto>();
    public List<PersonDto> pending = new List<PersonDto>();
    public List<PersonDto> pendingFriends = new List<PersonDto>();
    public FriendshipDto newFriend = new FriendshipDto();

    public PersonDto newFriendship = new PersonDto(); 

    protected override async Task OnInitializedAsync()
    {
        persons = await apiService.GetPersonsAsync();
        friendships = await apiService.GetFriendshipsAsync();

        foreach (var item in friendships)
        {
            if (loginstate.isSingedin.Id == item._idPerson.Id || loginstate.isSingedin.Id == item._idFriend.Id)
            {
                if (item.friend_accept == 1 && item.friend_request == 1) 
                {
                    if (loginstate.isSingedin.username == item._idPerson.username)
                    {
                        friends.Add(item._idFriend);
                    }
                    else
                    {
                        friends.Add(item._idPerson);
                    }
                }
                else if (item.friend_accept == 0 && item.friend_request == 1)//erottele myös ne ystävyydet, jotka on "pending" 
                {
                    if (loginstate.isSingedin.username == item._idPerson.username)
                    {
                        pending.Add(item._idFriend);
                    }
                    else
                    {
                        //pending.Add(item._idPerson);
                    }

                }

            }

        }

        //Show received friendship requested
        foreach (var item in friendships)
        {
            if (loginstate.isSingedin.username == item._idFriend.username && item.friend_accept == 0 && item.friend_request == 1)
            {
                pendingFriends.Add(item._idPerson);
            }
        }

        //Remove the friends and sent requests and pending requests from other list
        foreach (var item in persons)
        {
            if (friends.All(friend => friend.username != item.username) &&
                pending.All(pend => pend.username != item.username) &&
                item.username != loginstate.isSingedin.username &&
                pendingFriends.All(p => p.username != item.username))
            {
                other.Add(item);
            }
        }



        Console.WriteLine("debug mark");
    }

    protected async void SubmitFriendRequest(PersonDto friend)
    {
        //Tarvitaan buttonista kaverin tiedot, jolle lähetetään kaveripyyntö
        //loginstatesta kirjautuneen käyttäjän tiedot
        //Friendrequest pitää muuttaa 1
        //Friendaccept edelleen 0
        // All this to DB

        //Huom! Jostain syystä pitää generoida Id jotta menee läpi MongoDB:hen
        newFriend = new FriendshipDto { Id = ObjectId.GenerateNewId().ToString() };

        newFriend._idFriend = friend;
        newFriend._idPerson = loginstate.isSingedin;
        newFriend.friend_request = 1;
        newFriend.friend_accept = 0;

        //tarkista ettei ystävyyttä ole jo olemassa, ennen kuin lähetät ystäväkutsun
        if(!friends.Contains(friend) && !pending.Contains(friend))
        {
            await apiService.PostFriendshipAsync(newFriend);
            NavigationManager.NavigateTo("/personlist", true);
        }
        else
        {
            //prompt: Kutsu on jo lähetetty 
        }

    }

    protected async void AcceptFriendRequest(PersonDto friend)
    {

        //Where do we get the Friendship Id?
        //newFriend.Id = friend.Id;

        newFriend._idFriend = friend;
        newFriend._idPerson = loginstate.isSingedin;
        newFriend.friend_request = 1;
        newFriend.friend_accept = 1;

        friendshipsTobe = await apiService.GetFriendshipsAsync();
        foreach (var item in friendshipsTobe)
        {
            if (loginstate.isSingedin.username == item._idFriend.username )
            {
                if (friend.username == item._idPerson.username && item.friend_accept == 0 && item.friend_request == 1)
                {
                    newFriend.Id = item.Id;
                }
            }
           
        }

        await apiService.PutFriendshipAsync(newFriend.Id, newFriend);
        NavigationManager.NavigateTo("/personlist", true);
    }


    protected async void DeclineFriendRequest(PersonDto friend)
    {

        friendshipsTobe = await apiService.GetFriendshipsAsync();
        foreach (var item in friendshipsTobe)
        {
            if (loginstate.isSingedin.username == item._idFriend.username)
            {
                if (friend.username == item._idPerson.username && item.friend_accept == 0 && item.friend_request == 1)
                {
                    newFriend.Id = item.Id;
                }
            }

        }

        await apiService.DeleteFriendshipAsync(newFriend.Id);
        NavigationManager.NavigateTo("/personlist", true);
    }

}
