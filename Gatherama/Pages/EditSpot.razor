@page "/editspot/{Id}"
@layout NoMenuLayout

@using Gatherama.Shared
@using Microsoft.Maui.Controls.Maps
@using Microsoft.Maui.Maps
@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services
@using MongoDB.Bson;
@using Newtonsoft.Json


@inject IJSRuntime JS
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject LoginState loginstate
<br/>

<h3>Edit your spot </h3>


<head>
    <title>Simple Marker</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBBJYKuoWVsb2MFdchEYIihbAb3pN0fFUg&callback=initMap&libraries=&v=weekly" async defer></script>
    <link rel="stylesheet" href="./style.css" />
    <script src="./app.js"></script>
    <script>

        let markers = [];

        function initMap(editFinding) {

            const geocoder = new google.maps.Geocoder();

            const map = new google.maps.Map(document.getElementById("googleMap"), {
                zoom: 14,
                center: { lat: editFinding._idPlace.lat, lng: editFinding._idPlace.lng }, //alkukeskitys omaan paikkaan
                fullscreenControl: false,
                zoomControl: true,
                streetViewControl: false
            });

            newMarker = new google.maps.Marker({
                position: { lat: editFinding._idPlace.lat, lng: editFinding._idPlace.lng },
                map: map,
            });
            markers.push(newMarker)

            map.addListener("click", (e) => {

                placeMarkerAndPanTo(e.latLng, map, geocoder);
            });


            function placeMarkerAndPanTo(latLng, map, geocoder) {

                newMarker = new google.maps.Marker({
                    position: latLng,
                    map: map,
                    draggable: true
                });


                map.panTo(latLng);

                // window.alert("Tultiin geocodeen: " + latLng)
                const latilng = {
                    lat: parseFloat(latLng.lat()),
                    lng: parseFloat(latLng.lng()),
                };


                geocoder
                    .geocode({ location: latilng })
                    .then((response) => {
                        if (response && response.results && response.results.length > 0) {
                            const formattedAddress =
                                response.results[3].formatted_address;
                            // window.alert("Formatted address: " + JSON.stringify(response.results[3].formatted_address))
                            const latlngStr = formattedAddress.split(",", 2);
                            const cityCountry = {
                                city: latlngStr[0],
                                country: latlngStr[1],
                            };

                            setLocationData(latilng, cityCountry); // Set location data

                        } else {
                            window.alert("No results found");
                        }
                    })
                    .catch((e) =>
                        window.alert("Geocoder failed due to: " + e.message || "Unknown error")
                    );
                deleteMarkers();
                markers.push(newMarker);

                return newMarker;

            }

            // Sets the map on all markers in the array.
            function setMapOnAll(map) {
                for (let i = 0; i < markers.length; i++) {
                    markers[i].setMap(map);
                }
            }

            // Removes the markers from the map, but keeps them in the array.
            function hideMarkers() {
                setMapOnAll(null);
            }

            //Remove the markers on the map
            function deleteMarkers() {
                hideMarkers();
                markers = [];
            }

        }
        function setLocationData(latilng, cityCountry) {
            //window.alert("Tultiin setLoocationiin")

            const placeInfo = {
                city: cityCountry.city,
                county: cityCountry.country,
                lat: latilng.lat,
                lng: latilng.lng
            }

            document.getElementById("city").value = cityCountry.city;
            document.getElementById("country").value = cityCountry.country;
            document.getElementById("lat").value = JSON.stringify(latilng.lat);
            document.getElementById("lng").value = JSON.stringify(latilng.lng);

            return placeInfo;
        }

        function fetchData() {
            //window.alert("Tultiin fetchDataJS");
            var fetchPlaceInfo = document.getElementById("city").value + ",";
            fetchPlaceInfo += document.getElementById("country").value + ",";
            fetchPlaceInfo += document.getElementById("lat").value + ",";
            fetchPlaceInfo += document.getElementById("lng").value + ",";
            fetchPlaceInfo += document.getElementById("lng").value + ",";



            return fetchPlaceInfo;
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(
                browserHasGeolocation
                    ? "Error: The Geolocation service failed."
                    : "Error: Your browser doesn't support geolocation.",
            );
            infoWindow.open(map);
        }

        window.initMap = initMap;
    </script>
</head>
<body>
    <div> 
        <div id="googleMap" style="width:100%;height:400px;">

        </div>
    </div>
    <br />
    <button class="btn btn-primary" type="submit" style="margin-bottom: 20px;" @onclick="@(() => LeavePage())">Back to previous page</button>
    @if(editFinding != null)
    {
        <EditForm Model="@editFinding" Context="formContext" OnValidSubmit="EditFinding">
            <div class="col-lg-4 col-md-12">
                <label for="city" style="margin-top: 10px"> City </label>
                <InputText id="city" class="form-control" @bind-Value=editFinding._idPlace.city></InputText style="background-color: #fcf6e1 !important;">
                @if (errorTable != null)
                {
                    <div class="text-warning">@errorTable[0]</div>
                }
            </div>
            <div class="col-lg-4 col-md-12">
                <label for="country" style="margin-top: 10px"> Country </label>
                <InputText id="country" @bind-Value=editFinding._idPlace.country class="form-control" style="background-color: #fcf6e1 !important;"></InputText>
                @if (errorTable != null)
                {
                    <div class="text-warning">@errorTable[1]</div>
                }
            </div>
            <div class="col-lg-4 col-md-12">
                <label for="lat" style="margin-top: 10px"> Latitude </label>
                <InputNumber id="lat" @bind-Value=editFinding._idPlace.lat class="form-control" style="background-color: #fcf6e1 !important;"></InputNumber>
            </div>
            <div class="col-lg-4 col-md-12">
                <label for="lng" style="margin-top: 10px"> Longitude </label>
                <InputNumber id="lng" @bind-Value=editFinding._idPlace.lng class="form-control" style="background-color: #fcf6e1 !important;"></InputNumber>
                @if (errorTable != null)
                {
                    <div class="text-warning">@errorTable[2]</div>
                }
            </div>
            <div class="col-lg-4 col-md-12">
                <label for="findingDate" style="margin-top: 10px">Add a Date </label>
                <InputDate id="findingDate" @bind-Value=editFinding.datetime class="form-control" style="background-color: #fcf6e1 !important;"></InputDate>
            </div>

            <div class="col-lg-4 col-md-12">
                <label for="findindAmount" style="margin-top: 10px"> Amount </label>
                <InputText id="findindAmount" @bind-Value=editFinding.amount class="form-control" style="background-color: #fcf6e1 !important;"></InputText>
            </div>
            <div class="col-lg-4 col-md-12">
                <label for="findingMemo" style="margin-top: 10px"> Memo </label>
                <InputText id="findingMemo" @bind-Value=editFinding.memo class="form-control" style="background-color: #fcf6e1 !important;"></InputText>
            </div>

            <div class="col-lg-4 col-md-12">
                <label for="findindPrivate" style="margin-top: 10px"> Private or not? </label>
                <InputSelect id="findindPrivate" @bind-Value=editFinding._private class="form-control" style="background-color: #fcf6e1 !important;">
                    <option value="">Select...</option>
                    <option value="0">Private</option>
                    <option value="1">Friends</option>
                    <option value="2">Public</option>
                </InputSelect>
                @if (errorTable != null)
                {
                    <div class="text-warning">@errorTable[3]</div>
                }
            </div>

            <div class="col-lg-4 col-md-12">
                <label for="speciesCategory" style="margin-top: 10px"> Berries or Mushrooms? </label>
                <InputSelect id="speciesCategory" @bind-Value="editFinding._idSpecies.category" class="form-control" style="background-color: #fcf6e1 !important;">
                    <option value="">Select...</option>
                    <option>Berries</option>
                    <option>Mushrooms</option>
                </InputSelect>
                @if (errorTable != null)
                {
                    <div class="text-warning">@errorTable[4]</div>
                }
            </div>
            <div class="col-lg-4 col-md-12">
                <label for="speciesSubCategory" style="margin-top: 10px"> Species Sub Category </label>
                <InputText id="speciesSubCategory" @bind-Value="editFinding._idSpecies.subCategory" class="form-control" style="background-color: #fcf6e1 !important;">Enter the Sub Category name here</InputText>
            </div>
            <div class="col-lg-4 col-md-12">
                <label for="s_name" style="margin-top: 10px"> Species Name </label>
                <InputText id="s_name" @bind-Value="editFinding._idSpecies.s_name" class="form-control" style="background-color: #fcf6e1 !important;">Enter the Familiar name name here</InputText>
                @if (errorTable != null)
                {
                    <div class="text-warning">@errorTable[5]</div>
                }
            </div>
            <div class="col-lg-4 col-md-12">
                <label for="latin_name" style="margin-top: 10px"> Latin name </label>
                <InputText id="latin_name" @bind-Value="editFinding._idSpecies.latin_name" class="form-control" style="background-color: #fcf6e1 !important;">Enter the Latin name here</InputText>
            </div>
            <br />
            <button class="btn btn-primary" type="submit" style="margin-bottom: 50px;" @* @onclick="@(() => EditFinding(formContext))" *@>Change data!</button><button class ="btn btn-warning" type="button" style="margin-left: 15px; margin-bottom: 50px;" @onclick="() => OpenDeleteModal(formContext)">Delete</button>
            
        </EditForm>
    }
    
</body>

@* Delete Modal *@
@if (deleteModalShown)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this finding?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-warning" @onclick="DeleteFinding">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private string[] errorTable = new string[8];
    private bool isValidated = true;
    private bool placeExists = false;
    private bool speciesExists = false;
    private PlaceDto existingPlace = new PlaceDto();
    private SpeciesDto existingSpecies = new SpeciesDto();
    private FindingDto editFinding = new FindingDto()
    {
        _idPlace = new PlaceDto { },
        _idSpecies = new SpeciesDto { },
        _idPerson = new PersonDto { }
    };
    private List<PlaceDto> allplaces = new List<PlaceDto>();
    private List<SpeciesDto> allspecies = new List<SpeciesDto>();
    string placeInfoJS;
    private bool deleteModalShown = false;


    protected override async Task OnInitializedAsync()
    {
        editFinding = await apiService.GetFindingByIdAsync(Id);
        allplaces = await apiService.GetPlacesAsync();
        allspecies = await apiService.GetSpeciesAsync();

        await JS.InvokeVoidAsync("initMap", editFinding);
        await base.OnInitializedAsync();
    }

    protected async void EditFinding(EditContext formContext)
    {
        for (int i = 0; i < errorTable.Length; i++)
        {
            errorTable[i] = null;
        }
        isValidated = true;

        //Tarkista että kaikissa muuttujissa on arvot!! muuten error

        //Finding
        if (editFinding.datetime == null || editFinding.datetime > DateTime.Now)
        {
            var date = DateTime.Now.Date.ToString().Replace("00.00.00", "");
            editFinding.datetime = DateTime.Parse(date);
        }

        if (editFinding._private == null)
        {
            errorTable[3] = "Private is required";
            isValidated = false;
        }

        //memo ja amount voi puuttua -> jos puuttuu, merkitään kantaan "-"
        if (string.IsNullOrEmpty(editFinding.memo))
        {
            editFinding.memo = "-";
        }

        if (string.IsNullOrEmpty(editFinding.amount))
        {
            editFinding.amount = "-";
        }

        //Place
        if (string.IsNullOrEmpty(editFinding._idPlace.city))
        {
            errorTable[0] = "City is required";
            isValidated = false;
        }

        if (string.IsNullOrEmpty(editFinding._idPlace.country))
        {
            errorTable[1] = "Country is required";
            isValidated = false;
        }

        if (editFinding._idPlace.lat == null || editFinding._idPlace.lng == null)
        {
            errorTable[2] = "Coordinates are required";
            isValidated = false;
        }

        //Species

        if (string.IsNullOrEmpty(editFinding._idSpecies.category))
        {
            errorTable[4] = "Category is required";
            isValidated = false;
        }

        if (string.IsNullOrEmpty(editFinding._idSpecies.subCategory))
        {//ei pakollinen kenttä
            editFinding._idSpecies.subCategory = "-";
        }

        if (string.IsNullOrEmpty(editFinding._idSpecies.s_name))
        {
            errorTable[5] = "Name of the species is required";
            isValidated = false;
        }

        if (string.IsNullOrEmpty(editFinding._idSpecies.latin_name))
        {//ei pakollinen kenttä
            editFinding._idSpecies.latin_name = "-";
        }

        //onko tiedot oikein
        if (isValidated == true)
        {
            try{
                //Fetching the information from JS
                placeInfoJS = await JS.InvokeAsync<string>("fetchData");
                string[] splitFetch = placeInfoJS.Split(',');
                editFinding._idPlace.city = splitFetch[0];
                editFinding._idPlace.country = splitFetch[1];
                editFinding._idPlace.lat = double.Parse(splitFetch[2], System.Globalization.CultureInfo.InvariantCulture);
                editFinding._idPlace.lng = double.Parse(splitFetch[3], System.Globalization.CultureInfo.InvariantCulture);

                Console.WriteLine($"City: {editFinding._idPlace.city}, Lat: {editFinding._idPlace.lat}, Lng: {editFinding._idPlace.lng}");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception: " + ex);
            }

            placeExists = CheckIfPlaceExists();
            //jos paikka olemassa, käytetään vanhaa paikkaa
            if (placeExists)
            {
                editFinding._idPlace = existingPlace;
            }
            else
            {//muokataan paikkaa
                await apiService.PutPlaceAsync(editFinding._idPlace.Id, editFinding._idPlace);
            }

            speciesExists = CheckIfSpeciesExists();

            if (speciesExists)
            {
                editFinding._idSpecies = existingSpecies;
            }
            else
            {
                await apiService.PutSpeciesAsync(editFinding._idSpecies.Id, editFinding._idSpecies);
            }

            await apiService.PutFindingAsync(editFinding.Id, editFinding);
            NavigationManager.NavigateTo("/addspots", true);
        }
    }

    protected bool CheckIfPlaceExists()
    {
        //Onko olemassa jo kyseistä paikkaa ja / tai lajia täsmälleen samoilla tiedoilla?
        foreach (PlaceDto place in allplaces)
        {
            if (place.city == editFinding._idPlace.city && place.country == editFinding._idPlace.country && place.lat == editFinding._idPlace.lat && place.lng == editFinding._idPlace.lng)
            {
                placeExists = true;
                existingPlace = place;
                break;
            }
        }

        return placeExists;
    }

    protected bool CheckIfSpeciesExists()
    {
        foreach (SpeciesDto spec in allspecies)
        {
            if (spec.category == editFinding._idSpecies.category && spec.subCategory == editFinding._idSpecies.subCategory && spec.s_name == editFinding._idSpecies.s_name && spec.latin_name == editFinding._idSpecies.latin_name)
            {
                speciesExists = true;
                existingSpecies = spec;
                break;
            }
        }
        return speciesExists;
    }

    protected void OpenDeleteModal(EditContext formContext)
    {
        deleteModalShown = true;
    }

    private void CloseDeleteModal()
    {
        deleteModalShown = false;

    }

    protected async void DeleteFinding()
    {
        await apiService.DeletePlaceAsync(editFinding._idPlace.Id);
        await apiService.DeleteSpeciesAsync(editFinding._idSpecies.Id);
        await apiService.DeleteFindingAsync(Id);
        NavigationManager.NavigateTo("/ownspots", true);
    }

    protected void LeavePage()
    {
        NavigationManager.NavigateTo("/addspots", true);
    }
}
