@page "/maptesting"

@using Gatherama.Shared
@using Microsoft.Maui.Controls.Maps
@using Microsoft.Maui.Maps
@using System.Net.Http
@using System.Text.Json
@using System.Net.Http.Json;
@using System
@using System.Threading.Tasks
@using Microsoft.Maui.Controls
@using Gatherama.Services
@using MongoDB.Bson;

@inject IJSRuntime JS
@inject ApiService apiService
@inject NavigationManager NavigationManager
@inject LoginState loginstate




<h1>Add Gathering Spot</h1>

<p>Here you can add your new gathering spot!</p>


<head>
    <title>Simple Marker</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBBJYKuoWVsb2MFdchEYIihbAb3pN0fFUg&callback=initMap&libraries=&v=weekly" defer></script>
    <link rel="stylesheet" href="./style.css" />
    <script src="./app.js"></script>

    <script>
        let markers = [];

        function initMap() {
            var myLatLng = {

                lat: 62.8893928527832,
                lng: 27.6920166015625
            };

            const geocoder = new google.maps.Geocoder();

            const map = new google.maps.Map(document.getElementById("googleMap"), {
                zoom: 14,
                center: myLatLng,
                IsShowingUser: true, //turha
                fullscreenControl: false,
                zoomControl: true,
                streetViewControl: false
            });         

            const mush_icon = '../Images_index/mushroom_icon.png';
            const berry_icon = '../Images_index/berry_icon.png';

            //tarvitaan for each looppi jokaiselle tietokannan markkerille/lokaatiolla, jossa on haluttu käyttäjä ja kavereiden jakamat

            //testimarker
            var mush_marker = new google.maps.Marker({
                position: myLatLng,
                map,
                icon: {
                    url: mush_icon,
                    scaledSize: new google.maps.Size(36, 36)
                },
                title: "Finding",
                pickable: true

            });

            //toinen testimarker

            const berry_marker = new google.maps.Marker({
                position: { lat: 62.908551, lng: 27.659310 },
                map,
                icon: {
                    url: berry_icon,
                    scaledSize: new google.maps.Size(46, 46)
                },
                title: "BERRIES!"
            });

            //
            map.addListener("click", (e) => {

                placeMarkerAndPanTo(e.latLng, map, geocoder);
                //geocodeLatLng(e.latLng, geocoder, map);
            });

            //To pan to current location
            const locationButton = document.createElement("button");

            locationButton.textContent = "Pan to Current Location";
            locationButton.classList.add("custom-map-control-button");
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
            locationButton.addEventListener("click", () => {
                // Try HTML5 geolocation.
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const pos = {
                                lat: position.coords.latitude,
                                lng: position.coords.longitude,
                            };

                            //window.alert("Position is: " + pos);
                           // window.alert("Location found.");
                            //infoWindow.open(map);
                            map.setCenter(pos);
                        },
                        () => {
                            handleLocationError(true, infoWindow, map.getCenter());
                        },
                    );
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false, infoWindow, map.getCenter());
                }
            });

        }

         function placeMarkerAndPanTo(latLng, map, geocoder) {

            newMarker = new google.maps.Marker({
                position: latLng,
                map: map,
            });
           

            map.panTo(latLng);
      
           // window.alert("Tultiin geocodeen: " + latLng)
            const latilng = {
                lat: parseFloat(latLng.lat()),
                lng: parseFloat(latLng.lng()),
            };


            geocoder
                .geocode({ location: latilng })
                .then((response) => {
                    if (response && response.results && response.results.length > 0) {
                        const formattedAddress =
                            response.results[3].formatted_address;
                       // window.alert("Formatted address: " + JSON.stringify(response.results[3].formatted_address))
                        const latlngStr = formattedAddress.split(",", 2);
                        const cityCountry = {
                            city: latlngStr[0],
                            country: latlngStr[1],
                        };
                     
                        setLocationData(latilng, cityCountry); // Set location data 

                    } else {
                        window.alert("No results found");
                    }
                })
                .catch((e) =>
                    window.alert("Geocoder failed due to: " + e.message || "Unknown error")
                );
            deleteMarkers();
            markers.push(newMarker);

            return newMarker;

        }


        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // Removes the markers from the map, but keeps them in the array.
        function hideMarkers() {
            setMapOnAll(null);
        }

        //Remove the markers on the map
        function deleteMarkers() {
            hideMarkers();
            markers = [];
        }


        function setLocationData(latilng, cityCountry) {
            //window.alert("Tultiin setLoocationiin")

            const placeInfo = {
                city: cityCountry.city,
                county: cityCountry.country,
                lat: latilng.lat,
                lng: latilng.lng
            }

            document.getElementById("city").value = cityCountry.city;
            document.getElementById("country").value = cityCountry.country;
            document.getElementById("lat").value = JSON.stringify(latilng.lat);
            document.getElementById("lng").value = JSON.stringify(latilng.lng);

            return placeInfo;
        }

        function fetchData(){
           //window.alert("Tultiin fetchDataJS");
            var fetchPlaceInfo = document.getElementById("city").value + ",";
            fetchPlaceInfo += document.getElementById("country").value + ",";
            fetchPlaceInfo += document.getElementById("lat").value + ",";
            fetchPlaceInfo += document.getElementById("lng").value + ",";
           
                

            return fetchPlaceInfo;
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(
                browserHasGeolocation
                    ? "Error: The Geolocation service failed."
                    : "Error: Your browser doesn't support geolocation.",
            );
            infoWindow.open(map);
        }
       


        window.initMap = initMap;

    </script>
</head>
<body>
    <div>
       @*  <div>
            <input type="text" id="lat" placeholder="Lat" /> <!-- Vain double arvot sopivia -->
            <input type="text" id="lng" placeholder="Long"  />
            <input type="text" id="city" placeholder="City" />
            <input type="text" id="country" placeholder="Country" />
        </div>  *@

        <div id="googleMap" style="width:100%;height:400px;"></div>

    </div>

    <EditForm Model="newFinding" OnSubmit="@SubmitFinding">
        <DataAnnotationsValidator />
        <ValidationSummary />
    @*     <div class="col-lg-4 col-md-12">
            <strong>Username:</strong>
            <InputText id="personPosting" @bind-Value="@loginstate.isSingedin?.Id" class="form-control">"6515332fc07d1bda1e96c476"</InputText>
            <ValidationMessage For="@(() => newFinding._idPerson.Id)" />
        </div>
 *@

        <div class="col-lg-4 col-md-12">
            <label for="city"> City </label>
            <InputText id="city" class="form-control" @bind-Value=newFinding._idPlace.city></InputText>
            <ValidationMessage For="@(() => newFinding._idPlace.city)" />
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="country"> country </label>
            <InputText id="country" @bind-Value=newFinding._idPlace.country class="form-control"></InputText>
            <ValidationMessage For="@(() => newFinding._idPlace.country)" />
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="lat"> Latitude </label>
            <InputNumber id="lat" @bind-Value=newFinding._idPlace.lat class="form-control"></InputNumber>
            <ValidationMessage For="@(() => newFinding._idPlace.lat)" />
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="lng"> Longitude </label>
            <InputNumber id="lng" @bind-Value=newFinding._idPlace.lng class="form-control"></InputNumber>
            <ValidationMessage For="@(() => newFinding._idPlace.lng)" />
        </div>


        <div class="col-lg-4 col-md-12">
            <label for="findingDate">Add a Date </label>
            <InputDate id="findingDate" @bind-Value=newFinding.datetime class="form-control"></InputDate>
            <ValidationMessage For="@(() => newFinding.datetime)" />
        </div>

        <div class="col-lg-4 col-md-12">
            <label for="findindAmount"> Amount </label>
            <InputText id="findindAmount" @bind-Value=newFinding.amount class="form-control"></InputText>
            <ValidationMessage For="@(() => newFinding.amount)" />
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="findingMemo"> Memo </label>
            <InputText id="findingMemo" @bind-Value=newFinding.memo class="form-control">Enter memolog here</InputText>
            <ValidationMessage For="@(() => newFinding.memo)" />
        </div>

        <div class="col-lg-4 col-md-12">
            <label for="findindPrivate"> Private or not? </label>
            <InputSelect id="findindPrivate" @bind-Value=newFinding._private class="form-control">
                <option value="">Select...</option>
                <option value="0">Private</option>
                <option value="1">Public</option>
            </InputSelect>
            <ValidationMessage For="@(() => newFinding._private)" />
        </div>

      

        <div class="col-lg-4 col-md-12">
            <label for="speciesCategory"> Berries or Mushrooms? </label>
            <InputSelect id="speciesCategory" @bind-Value="newFinding._idSpecies.category" class="form-control" >
                <option value="">Select...</option>
                <option>Berries</option>
                <option>Mushrooms</option>
            </InputSelect>
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="speciesSubCategory"> Species Sub Category </label>
            <InputText id="speciesSubCategory" @bind-Value="newFinding._idSpecies.subCategory" class="form-control">Enter the Sub Category name here</InputText>
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="s_name"> Species Name </label>
            <InputText id="s_name" @bind-Value="newFinding._idSpecies.s_name" class="form-control">Enter the Familiar name name here</InputText>
        </div>
        <div class="col-lg-4 col-md-12">
            <label for="latin_name"> Latin name </label>
            <InputText id="latin_name" @bind-Value="newFinding._idSpecies.latin_name" class="form-control">Enter the Latin name here</InputText>
        </div>

        <button class="btn btn-primary" type="submit">Add a Finding!</button>
    </EditForm>

</body>




@code {
    //GOOGLE MAPS API KEY (KATA): AIzaSyBBJYKuoWVsb2MFdchEYIihbAb3pN0fFUg
    private FindingDto newFinding = new FindingDto()
        {
            _idPlace = new PlaceDto { },
            _idSpecies = new SpeciesDto { },
            _idPerson = new PersonDto { }
        };

    private FindingDto postFinding = new FindingDto();

    string personPosting = "6515332fc07d1bda1e96c476";

    public List<FindingDto> findings { get; private set; }
    public List<PersonDto> persons { get; private set; }
    public List<SpeciesDto> species { get; private set; }
    public List<PlaceDto> places { get; private set; }
    private SpeciesDto specie;
    private PersonDto person;
    private PlaceDto place;
    int collapsingNbr = 0;
    int headingNbr = 0;

    string placeInfoJS;

    string collabId = "test";
    string headingId = "test";
    string itemId = "testi";

    protected override async Task OnInitializedAsync()
    {
        var dateAndTime = DateTime.Now;
        var date = dateAndTime.Date.ToString().Replace("00.00.00", ""); ;
        newFinding.datetime = DateTime.Parse(date);
        findings = await apiService.GetFindingsAsync();

        // It is not pretty but this is how I got it working the ID thingy
        newFinding._idPlace = new PlaceDto { Id = ObjectId.GenerateNewId().ToString() };
        newFinding._idSpecies = new SpeciesDto { Id = ObjectId.GenerateNewId().ToString() };

        persons = await apiService.GetPersonsAsync();
        species = await apiService.GetSpeciesAsync();
        places = await apiService.GetPlacesAsync();

        newFinding._idPerson = await apiService.GetPersonByIdAsync(loginstate.isSingedin?.Id);



    }
    private string scriptResult;

    protected async void SubmitFinding()
    {
        placeInfoJS = await JS.InvokeAsync<string>("fetchData");
        //string serializedObject = JsonSerializer.Serialize(placeInfoJS);
        string[] splitFetch = placeInfoJS.Split(',');
        newFinding._idPlace.city = splitFetch[0];
        newFinding._idPlace.country = splitFetch[1];
        newFinding._idPlace.lat = double.Parse(splitFetch[2], System.Globalization.CultureInfo.InvariantCulture);
        newFinding._idPlace.lng = double.Parse(splitFetch[3], System.Globalization.CultureInfo.InvariantCulture);


        Console.WriteLine($"City: {newFinding._idPlace.city}, Lat: {newFinding._idPlace.lat}, Lng: {newFinding._idPlace.lng}");
        await apiService.PostPlaceAsync(newFinding._idPlace);
        await apiService.PostSpeciesAsync(newFinding._idSpecies);

        await apiService.PostFindingAsync(newFinding);
        NavigationManager.NavigateTo("/ownspots", true);
    }

   
}
