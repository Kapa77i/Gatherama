@page "/register"
@using Gatherama.Services;
@inject ApiService apiService
@inject IJSRuntime js
@inject NavigationManager NavigationManager

<h3>Register</h3>

<EditForm Model="@person" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="FirstName">
            Firstname:
        </label>
        <InputText id="FirstName" class="form-control" @bind-Value="@person.firstName" style="background-color: #fcf6e1 !important;" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[0]</div>
        }
        <ValidationMessage For="@(() => person.firstName)" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="LastName">
            Lastname:
        </label>
        <InputText id="LastName" class="form-control" @bind-Value="@person.lastName" style="background-color: #fcf6e1 !important;" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[1]</div>
        }
        <ValidationMessage For="@(() => person.lastName)" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label class="form-label" for="UserName">
            Username:
        </label>
        <InputText id="UserName" class="form-control" @bind-Value="@person.username" style="background-color: #fcf6e1 !important;" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[2]</div>
        }
        <ValidationMessage For="@(() => person.username)" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="Email">
            Email:
        </label>
        <InputText id="Email" class="form-control" @bind-Value="@person.email" style="background-color: #fcf6e1 !important;" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[3]</div>
        }
        <ValidationMessage For="@(() => person.email)" />
    </div>

    <div class="col-lg-4 col-md-12">
        <label for="password">
            Password:
        </label>
        <InputText id="password" type="password" class="form-control" @bind-Value="@person.password" style="background-color: #fcf6e1 !important;" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[4]</div>
        }
        <ValidationMessage For="@(() => person.password)" />
    </div>
    <div class="col-lg-4 col-md-12">
        <label for="repeatPassword">
            Repeat password:
        </label>
        <InputText id="repeatPassword" type="password" class="form-control" @bind-Value="@repeatPassword" style="background-color: #fcf6e1 !important;" />
        @if (errorTable != null)
        {
            <div class="text-warning">@errorTable[5]</div>
        }
        <ValidationMessage For="@(() => repeatPassword)" />
    </div>
    <br />
    @*Dont know how to present succesfull registeration to user. Pop-up when you click ok it redirects you to index page?*@
    <button class="btn btn-primary" type="submit">Register</button>
</EditForm>
@code {
    private string[] errorTable = new string[7];
    private bool isValidated = true;
    private string repeatPassword;
    private PersonDto person = new PersonDto();
    private List<PersonDto> persons = new List<PersonDto>();
    private bool isUserFound = false;

    protected override async Task OnInitializedAsync()
    {
        persons = await apiService.GetPersonsAsync();
    }

    protected async void Submit()
    {
        for (int i = 0; i < errorTable.Length; i++)
        {
            errorTable[i] = null;
        }


        //Edit input fields validation
        if (string.IsNullOrEmpty(person.firstName) || person.firstName.Length > 25)
        {
            errorTable[0] = "First Name is required";
            isValidated = false;
        }
        if (string.IsNullOrEmpty(person.lastName) || person.lastName.Length > 25)
        {
            errorTable[1] = "Last Name is required";
            isValidated = false;
        }
        if (string.IsNullOrEmpty(person.username) || person.username.Length > 25)
        {
            errorTable[2] = "Username is required";
            isValidated = false;
        }
        if (string.IsNullOrEmpty(person.email) || !person.email.Contains("@") || person.email.Length > 45)
        {
            errorTable[3] = "Email is required";
            isValidated = false;
        }
        if (string.IsNullOrEmpty(person.password))
        {
            errorTable[4] = "Password is required";
            isValidated = false;
        }
        if (string.IsNullOrEmpty(repeatPassword) || person.password != repeatPassword)
        {
            errorTable[5] = "Password and Repeat password do not match";
            isValidated = false;
        }
        else
        {
            isValidated = true;
            isUserFound = false;
            foreach (var item in persons)
            {
                if (item.username == person.username)
                {
                    await js.InvokeVoidAsync("alert", "Username is already in use");
                    isUserFound = true;
                    break;
                }
                if (item.email == person.email)
                {
                    await js.InvokeVoidAsync("alert", "Email is already in use");
                    isUserFound = true;
                    break;
                }
            }

            // isValidated = true;

            if (!isUserFound && isValidated == true)
            {
                await apiService.PostPersonAsync(person);
                await js.InvokeVoidAsync("alert","Registration was successful");
                NavigationManager.NavigateTo("/login", true);
            }
        }
        
    }
}
